Pvalue <- pchisq(AR, 1)
AR_0[draws] <- AR
pvalue_AR_0[draws] <- Pvalue
}
library(MASS)
#U^2 = 0
beta_tsls_0 <- matrix(0, nrow = 10000, ncol = 1)
t_value_0 <- matrix(0, nrow = 10000, ncol = 1)
pvalue_t_0 <- matrix(0, nrow = 10000, ncol = 1)
AR_0 <- matrix(0, nrow = 10000, ncol = 1)
pvalue_AR_0 <- matrix(0, nrow = 10000, ncol = 1)
for(draws in 1:100){
Sigma_d <- matrix(c(1, 0.99, 0.99, 1), nrow=2, ncol = 2)
errors <- mvrnorm(n = 500, mu = c(0, 0), Sigma = Sigma_d)
beta_ols <- cor(errors[,1], errors[,2])/sd(errors[,2])
z <- matrix(1, nrow = 500, ncol = 1)
u <- sqrt(0)
pi <- u/sum(z)^(1/2)
y <- matrix(0, nrow = 500, ncol = 1)
x <- matrix(0, nrow = 500, ncol = 1)
for(i in 1:length(errors[,1])){
x[i] <- pi*z[i] + errors[i,2]
}
for(i in 1:length(errors[,1])){
y[i] <- errors[i,1]
}
beta_tsls <- solve(t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%x)%*%t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%y #2SLS
beta_tsls_0[draws] <- beta_tsls
u <- y - x%*%beta_tsls_0[draws]
sigma <- as.vector((t(u)%*%u)/length(y))
v_hom <- length(y)*(sigma*solve(t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%x))
t_value <- sqrt(length(y)-1)%*%beta_tsls_0[draws]%*%solve(sqrt(v_hom))
t_value_0[draws] <- t_value
Pvalue <- pnorm(t_value, lower.tail = FALSE)
pvalue_t_0[draws] <- Pvalue
Y_bar <- matrix(c(y, x), nrow = 500, ncol = 2)
b0 <- matrix(c(1, 0), nrow = 2, ncol = 1)
Mz <- diag(500) -  z%*%solve(t(z)%*%z)%*%t(z)
num <- (t(z)%*%z)^(-1/2)*t(z)%*%Y_bar%*%b0
omega <- t(Y_bar)%*%Mz%*%Y_bar/(length(x)-1)
den <- sqrt(t(b0)%*%omega%*%b0)
S <- num/den
AR <- S*S
Pvalue <- pchisq(AR, 1)
AR_0[draws] <- AR
pvalue_AR_0[draws] <- Pvalue
}
Q <- quantile(beta_tsls_0, probs=c(.05, .95), na.rm = FALSE)
beta_tsls_0 <- subset(beta_tsls_0, beta_tsls_0 > Q[1] & beta_tsls_0 < Q[2])
plot(density(beta_tsls_0))
library(MASS)
#U^2 = 0
beta_tsls_0 <- matrix(0, nrow = 10000, ncol = 1)
t_value_0 <- matrix(0, nrow = 10000, ncol = 1)
pvalue_t_0 <- matrix(0, nrow = 10000, ncol = 1)
AR_0 <- matrix(0, nrow = 10000, ncol = 1)
pvalue_AR_0 <- matrix(0, nrow = 10000, ncol = 1)
for(draws in 1:1000){
Sigma_d <- matrix(c(1, 0.99, 0.99, 1), nrow=2, ncol = 2)
errors <- mvrnorm(n = 500, mu = c(0, 0), Sigma = Sigma_d)
beta_ols <- cor(errors[,1], errors[,2])/sd(errors[,2])
z <- matrix(1, nrow = 500, ncol = 1)
u <- sqrt(0)
pi <- u/sum(z)^(1/2)
y <- matrix(0, nrow = 500, ncol = 1)
x <- matrix(0, nrow = 500, ncol = 1)
for(i in 1:length(errors[,1])){
x[i] <- pi*z[i] + errors[i,2]
}
for(i in 1:length(errors[,1])){
y[i] <- errors[i,1]
}
beta_tsls <- solve(t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%x)%*%t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%y #2SLS
beta_tsls_0[draws] <- beta_tsls
u <- y - x%*%beta_tsls_0[draws]
sigma <- as.vector((t(u)%*%u)/length(y))
v_hom <- length(y)*(sigma*solve(t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%x))
t_value <- sqrt(length(y)-1)%*%beta_tsls_0[draws]%*%solve(sqrt(v_hom))
t_value_0[draws] <- t_value
Pvalue <- pnorm(t_value, lower.tail = FALSE)
pvalue_t_0[draws] <- Pvalue
Y_bar <- matrix(c(y, x), nrow = 500, ncol = 2)
b0 <- matrix(c(1, 0), nrow = 2, ncol = 1)
Mz <- diag(500) -  z%*%solve(t(z)%*%z)%*%t(z)
num <- (t(z)%*%z)^(-1/2)*t(z)%*%Y_bar%*%b0
omega <- t(Y_bar)%*%Mz%*%Y_bar/(length(x)-1)
den <- sqrt(t(b0)%*%omega%*%b0)
S <- num/den
AR <- S*S
Pvalue <- pchisq(AR, 1)
AR_0[draws] <- AR
pvalue_AR_0[draws] <- Pvalue
}
Q <- quantile(beta_tsls_0, probs=c(.05, .95), na.rm = FALSE)
beta_tsls_0 <- subset(beta_tsls_0, beta_tsls_0 > Q[1] & beta_tsls_0 < Q[2])
plot(density(beta_tsls_0))
Q <- quantile(t_value_0, probs=c(.05, .95), na.rm = FALSE)
t_value_0 <- subset(t_value_0, t_value_0 > Q[1] & t_value_0 < Q[2])
plot(density(t_value_0))
library(MASS)
#U^2 = 0
beta_tsls_0 <- matrix(0, nrow = 10000, ncol = 1)
t_value_0 <- matrix(0, nrow = 10000, ncol = 1)
pvalue_t_0 <- matrix(0, nrow = 10000, ncol = 1)
AR_0 <- matrix(0, nrow = 10000, ncol = 1)
pvalue_AR_0 <- matrix(0, nrow = 10000, ncol = 1)
for(draws in 1:1000){
Sigma_d <- matrix(c(1, 0.99, 0.99, 1), nrow=2, ncol = 2)
errors <- mvrnorm(n = 500, mu = c(0, 0), Sigma = Sigma_d)
beta_ols <- cor(errors[,1], errors[,2])/sd(errors[,2])
z <- matrix(1, nrow = 500, ncol = 1)
u <- sqrt(0)
pi <- u/sum(z)^(1/2)
y <- matrix(0, nrow = 500, ncol = 1)
x <- matrix(0, nrow = 500, ncol = 1)
for(i in 1:length(errors[,1])){
x[i] <- pi*z[i] + errors[i,2]
}
for(i in 1:length(errors[,1])){
y[i] <- errors[i,1]
}
beta_tsls <- solve(t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%x)%*%t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%y #2SLS
beta_tsls_0[draws] <- beta_tsls
u <- y - x%*%beta_tsls_0[draws]
sigma <- as.vector((t(u)%*%u)/length(y))
v_hom <- length(y)*(sigma*solve(t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%x))
t_value <- sqrt(length(y)-1)%*%beta_tsls_0[draws]%*%solve(sqrt(v_hom))
t_value_0[draws] <- t_value
Pvalue <- pnorm(t_value, lower.tail = FALSE)
pvalue_t_0[draws] <- Pvalue
Y_bar <- matrix(c(y, x), nrow = 500, ncol = 2)
b0 <- matrix(c(1, 0), nrow = 2, ncol = 1)
Mz <- diag(500) -  z%*%solve(t(z)%*%z)%*%t(z)
num <- (t(z)%*%z)^(-1/2)*t(z)%*%Y_bar%*%b0
omega <- t(Y_bar)%*%Mz%*%Y_bar/(length(x)-1)
den <- sqrt(t(b0)%*%omega%*%b0)
S <- num/den
AR <- S*S
Pvalue <- pchisq(AR, 1)
AR_0[draws] <- AR
pvalue_AR_0[draws] <- Pvalue
}
Q <- quantile(beta_tsls_0, probs=c(.05, .95), na.rm = FALSE)
beta_tsls_0 <- subset(beta_tsls_0, beta_tsls_0 > Q[1] & beta_tsls_0 < Q[2])
plot(density(beta_tsls_0), main = "Density of 2SLS estimator")
Q <- quantile(t_value_0, probs=c(.05, .95), na.rm = FALSE)
t_value_0 <- subset(t_value_0, t_value_0 > Q[1] & t_value_0 < Q[2])
plot(density(t_value_0), main = "Density plot of t-values")
Q <- quantile(AR_0, probs=c(.05, .95), na.rm = FALSE)
AR_0 <- subset(AR_0, AR_0 > Q[1] & AR_0 < Q[2])
plot(density(AR_0), "Anderson Rubin Null-Rejection Probability")
Q <- quantile(AR_0, probs=c(.05, .95), na.rm = FALSE)
AR_0 <- subset(AR_0, AR_0 > Q[1] & AR_0 < Q[2])
plot(density(AR_0), "Anderson Rubin Statistic")
#U^2 = 0.25
beta_tsls_0.25 <- matrix(0, nrow = 10000, ncol = 1)
t_value_0.25 <- matrix(0, nrow = 10000, ncol = 1)
pvalue_t_0.25 <- matrix(0, nrow = 10000, ncol = 1)
AR_0.25 <- matrix(0, nrow = 10000, ncol = 1)
pvalue_AR_0.25 <- matrix(0, nrow = 10000, ncol = 1)
for(draws in 1:10000){
Sigma_d <- matrix(c(1, 0.99, 0.99, 1), nrow=2, ncol = 2)
errors <- mvrnorm(n = 500, mu = c(0, 0), Sigma = Sigma_d)
beta_ols <- cor(errors[,1], errors[,2])/sd(errors[,2])
z <- matrix(1, nrow = 500, ncol = 1)
u <- sqrt(0.25)
pi <- u/sum(z)^(1/2)
y <- matrix(0, nrow = 500, ncol = 1)
x <- matrix(0, nrow = 500, ncol = 1)
for(i in 1:length(errors[,1])){
x[i] <- pi*z[i] + errors[i,2]
}
for(i in 1:length(errors[,1])){
y[i] <- errors[i,1]
}
beta_tsls <- solve(t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%x)%*%t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%y #2SLS
beta_tsls_0.25[draws] <- beta_tsls
u <- y - x%*%beta_tsls_0.25[draws]
sigma <- as.vector((t(u)%*%u)/length(y))
v_hom <- length(y)*(sigma*solve(t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%x))
t_value <- sqrt(length(y)-1)%*%beta_tsls_0.25[draws]%*%solve(sqrt(v_hom))
t_value_0.25[draws] <- t_value
Pvalue <- pnorm(t_value, lower.tail = FALSE)
pvalue_t_0.25[draws] <- Pvalue
Y_bar <- matrix(c(y, x), nrow = 500, ncol = 2)
b0 <- matrix(c(1, 0), nrow = 2, ncol = 1)
Mz <- diag(500) -  z%*%solve(t(z)%*%z)%*%t(z)
num <- (t(z)%*%z)^(-1/2)*t(z)%*%Y_bar%*%b0
omega <- t(Y_bar)%*%Mz%*%Y_bar/(length(x)-1)
den <- sqrt(t(b0)%*%omega%*%b0)
S <- num/den
AR <- S*S
Pvalue <- pchisq(AR, 1)
AR_0.25[draws] <- AR
pvalue_AR_0.25[draws] <- Pvalue
}
#U^2 = 0.25
beta_tsls_0.25 <- matrix(0, nrow = 10000, ncol = 1)
t_value_0.25 <- matrix(0, nrow = 10000, ncol = 1)
pvalue_t_0.25 <- matrix(0, nrow = 10000, ncol = 1)
AR_0.25 <- matrix(0, nrow = 10000, ncol = 1)
pvalue_AR_0.25 <- matrix(0, nrow = 10000, ncol = 1)
for(draws in 1:1000){
Sigma_d <- matrix(c(1, 0.99, 0.99, 1), nrow=2, ncol = 2)
errors <- mvrnorm(n = 500, mu = c(0, 0), Sigma = Sigma_d)
beta_ols <- cor(errors[,1], errors[,2])/sd(errors[,2])
z <- matrix(1, nrow = 500, ncol = 1)
u <- sqrt(0.25)
pi <- u/sum(z)^(1/2)
y <- matrix(0, nrow = 500, ncol = 1)
x <- matrix(0, nrow = 500, ncol = 1)
for(i in 1:length(errors[,1])){
x[i] <- pi*z[i] + errors[i,2]
}
for(i in 1:length(errors[,1])){
y[i] <- errors[i,1]
}
beta_tsls <- solve(t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%x)%*%t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%y #2SLS
beta_tsls_0.25[draws] <- beta_tsls
u <- y - x%*%beta_tsls_0.25[draws]
sigma <- as.vector((t(u)%*%u)/length(y))
v_hom <- length(y)*(sigma*solve(t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%x))
t_value <- sqrt(length(y)-1)%*%beta_tsls_0.25[draws]%*%solve(sqrt(v_hom))
t_value_0.25[draws] <- t_value
Pvalue <- pnorm(t_value, lower.tail = FALSE)
pvalue_t_0.25[draws] <- Pvalue
Y_bar <- matrix(c(y, x), nrow = 500, ncol = 2)
b0 <- matrix(c(1, 0), nrow = 2, ncol = 1)
Mz <- diag(500) -  z%*%solve(t(z)%*%z)%*%t(z)
num <- (t(z)%*%z)^(-1/2)*t(z)%*%Y_bar%*%b0
omega <- t(Y_bar)%*%Mz%*%Y_bar/(length(x)-1)
den <- sqrt(t(b0)%*%omega%*%b0)
S <- num/den
AR <- S*S
Pvalue <- pchisq(AR, 1)
AR_0.25[draws] <- AR
pvalue_AR_0.25[draws] <- Pvalue
}
Q <- quantile(beta_tsls_0.25, probs=c(.05, .95), na.rm = FALSE)
beta_tsls_0.25 <- subset(beta_tsls_0.25, beta_tsls_0.25 > Q[1] & beta_tsls_0.25 < Q[2])
plot(density(beta_tsls_0.25))
Q <- quantile(t_value_0.25, probs=c(.05, .95), na.rm = FALSE)
t_value_0.25 <- subset(t_value_0.25, t_value_0.25 > Q[1] & t_value_0.25 < Q[2])
plot(density(t_value_0.25))
Q <- quantile(AR_0.25, probs=c(.05, .95), na.rm = FALSE)
AR_0.25 <- subset(AR_0.25, AR_0.25 > Q[1] & AR_0.25 < Q[2])
plot(density(AR_0.25))
#U^2 = 10
beta_tsls_10 <- matrix(0, nrow = 10000, ncol = 1)
t_value_10 <- matrix(0, nrow = 10000, ncol = 1)
pvalue_t_10 <- matrix(0, nrow = 10000, ncol = 1)
AR_10 <- matrix(0, nrow = 10000, ncol = 1)
pvalue_AR_10 <- matrix(0, nrow = 10000, ncol = 1)
for(draws in 1:1000){
Sigma_d <- matrix(c(1, 0.99, 0.99, 1), nrow=2, ncol = 2)
errors <- mvrnorm(n = 500, mu = c(0, 0), Sigma = Sigma_d)
beta_ols <- cor(errors[,1], errors[,2])/sd(errors[,2])
z <- matrix(1, nrow = 500, ncol = 1)
u <- sqrt(10)
pi <- u/sum(z)^(1/2)
y <- matrix(0, nrow = 500, ncol = 1)
x <- matrix(0, nrow = 500, ncol = 1)
for(i in 1:length(errors[,1])){
x[i] <- pi*z[i] + errors[i,2]
}
for(i in 1:length(errors[,1])){
y[i] <- errors[i,1]
}
beta_tsls <- solve(t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%x)%*%t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%y #2SLS
beta_tsls_10[draws] <- beta_tsls
u <- y - x%*%beta_tsls_10[draws]
sigma <- as.vector((t(u)%*%u)/length(y))
v_hom <- length(y)*(sigma*solve(t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%x))
t_value <- sqrt(length(y)-1)%*%beta_tsls_10[draws]%*%solve(sqrt(v_hom))
t_value_10[draws] <- t_value
Pvalue <- pnorm(t_value, lower.tail = FALSE)
pvalue_t_10[draws] <- Pvalue
Y_bar <- matrix(c(y, x), nrow = 500, ncol = 2)
b0 <- matrix(c(1, 0), nrow = 2, ncol = 1)
Mz <- diag(500) -  z%*%solve(t(z)%*%z)%*%t(z)
num <- (t(z)%*%z)^(-1/2)*t(z)%*%Y_bar%*%b0
omega <- t(Y_bar)%*%Mz%*%Y_bar/(length(x)-1)
den <- sqrt(t(b0)%*%omega%*%b0)
S <- num/den
AR <- S*S
Pvalue <- pchisq(AR, 1)
AR_10[draws] <- AR
pvalue_AR_10[draws] <- Pvalue
}
Q <- quantile(beta_tsls_10, probs=c(.05, .95), na.rm = FALSE)
beta_tsls_10 <- subset(beta_tsls_10, beta_tsls_10 > Q[1] & beta_tsls_10 < Q[2])
plot(density(beta_tsls_10))
Q <- quantile(t_value_10, probs=c(.05, .95), na.rm = FALSE)
t_value_10 <- subset(t_value_10, t_value_10 > Q[1] & t_value_10 < Q[2])
plot(density(t_value_10))
Q <- quantile(AR_10, probs=c(.05, .95), na.rm = FALSE)
AR_10 <- subset(AR_10, AR_10 > Q[1] & AR_10 < Q[2])
plot(density(AR_10))
#U^2 = 100
beta_tsls_100 <- matrix(0, nrow = 10000, ncol = 1)
t_value_100 <- matrix(0, nrow = 10000, ncol = 1)
pvalue_t_100 <- matrix(0, nrow = 10000, ncol = 1)
AR_100 <- matrix(0, nrow = 10000, ncol = 1)
pvalue_AR_100 <- matrix(0, nrow = 10000, ncol = 1)
for(draws in 1:1000){
Sigma_d <- matrix(c(1, 0.99, 0.99, 1), nrow=2, ncol = 2)
errors <- mvrnorm(n = 500, mu = c(0, 0), Sigma = Sigma_d)
beta_ols <- cor(errors[,1], errors[,2])/sd(errors[,2])
z <- matrix(1, nrow = 500, ncol = 1)
u <- sqrt(100)
pi <- u/sum(z)^(1/2)
y <- matrix(0, nrow = 500, ncol = 1)
x <- matrix(0, nrow = 500, ncol = 1)
for(i in 1:length(errors[,1])){
x[i] <- pi*z[i] + errors[i,2]
}
for(i in 1:length(errors[,1])){
y[i] <- errors[i,1]
}
beta_tsls <- solve(t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%x)%*%t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%y #2SLS
beta_tsls_100[draws] <- beta_tsls
u <- y - x%*%beta_tsls_100[draws]
sigma <- as.vector((t(u)%*%u)/length(y))
v_hom <- length(y)*(sigma*solve(t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%x))
t_value <- sqrt(length(y)-1)%*%beta_tsls_100[draws]%*%solve(sqrt(v_hom))
t_value_100[draws] <- t_value
Pvalue <- pnorm(t_value, lower.tail = FALSE)
pvalue_t_100[draws] <- Pvalue
Y_bar <- matrix(c(y, x), nrow = 500, ncol = 2)
b0 <- matrix(c(1, 0), nrow = 2, ncol = 1)
Mz <- diag(500) -  z%*%solve(t(z)%*%z)%*%t(z)
num <- (t(z)%*%z)^(-1/2)*t(z)%*%Y_bar%*%b0
omega <- t(Y_bar)%*%Mz%*%Y_bar/(length(x)-1)
den <- sqrt(t(b0)%*%omega%*%b0)
S <- num/den
AR <- S*S
Pvalue <- pchisq(AR, 1, lower.tail = FALSE)
AR_100[draws] <- AR
pvalue_AR_100[draws] <- Pvalue
}
Q <- quantile(beta_tsls_100, probs=c(.05, .95), na.rm = FALSE)
beta_tsls_100 <- subset(beta_tsls_100, beta_tsls_100 > Q[1] & beta_tsls_100 < Q[2])
plot(density(beta_tsls_100))
Q <- quantile(t_value_100, probs=c(.05, .95), na.rm = FALSE)
t_value_100 <- subset(t_value_100, t_value_100 > Q[1] & t_value_100 < Q[2])
plot(density(t_value_100))
Q <- quantile(AR_100, probs=c(.05, .95), na.rm = FALSE)
AR_100 <- subset(AR_100, AR_100 > Q[1] & AR_100 < Q[2])
plot(density(AR_100))
#Comparison of probabilities
length(subset(pvalue_t_0,pvalue_t_0 < 0.05))/length(pvalue_t_0)
length(subset(pvalue_t_0.25,pvalue_t_0.25 < 0.05))/length(pvalue_t_0.25)
length(subset(pvalue_t_10,pvalue_t_10 < 0.05))/length(pvalue_t_10)
length(subset(pvalue_t_100,pvalue_t_100 < 0.05))/length(pvalue_t_100)
length(subset(pvalue_AR_0,pvalue_AR_0 < 0.05))/length(pvalue_AR_0)
length(subset(pvalue_AR_0.25,pvalue_AR_0.25 < 0.05))/length(pvalue_AR_0.25)
length(subset(pvalue_AR_10,pvalue_AR_10 < 0.05))/length(pvalue_AR_10)
length(subset(pvalue_AR_100,pvalue_AR_100 < 0.05))/length(pvalue_AR_100)
pchisq(0.95, 1)
#Plot for question e
dens_0 <- density(beta_tsls_0)
dens_0.25 <- density(beta_tsls_0.25)
dens_10 <- density(beta_tsls_10)
dens_100 <- density(beta_tsls_100)
plot(dens_0, main = "2SLS Estimator", xlab = "Value", ylab = "Probability Density", xlim = c(-2, 4), ylim = c(0, 4.5),lwd=2)
lines(dens_0.25,lty=3)
lines(dens_10, lty=1 )
lines(dens_100, lty=4)
legend("topright",
legend = c(expression(mu^2/k == 0),
expression(mu^2/k == 0.25),
expression(mu^2/k == 10),
expression(mu^2/k == 100)),
lty = c(1, 3, 1, 4),
lwd= c(2,1,1,1),
cex = 0.8)
#Plot 1 for question g
dens_0 <- density(t_value_0)
dens_0.25 <- density(t_value_0.25)
dens_10 <- density(t_value_10)
dens_100 <- density(t_value_100)
plot(dens_0, main = "t value", xlab = "Value", ylab = "Probability Density", xlim = c(-2, 4), ylim = c(0, 0.8),lwd=2)
lines(dens_0.25,lty=3)
lines(dens_10, lty=1 )
lines(dens_100, lty=4)
legend("topright",
legend = c(expression(mu^2/k == 0),
expression(mu^2/k == 0.25),
expression(mu^2/k == 10),
expression(mu^2/k == 100)),
lty = c(1, 3, 1, 4),
lwd= c(2,1,1,1),
cex = 0.8)
#Plot 2 for question g
dens_0 <- density(AR_0)
dens_0.25 <- density(AR_0.25)
dens_10 <- density(AR_10)
dens_100 <- density(AR_100)
plot(dens_0, main = "AR Statistic", xlab = "Value", ylab = "Probability Density", xlim = c(-2, 4), ylim = c(0, 1.2),lwd=2)
lines(dens_0.25,lty=3)
lines(dens_10, lty=1 )
lines(dens_100, lty=4)
legend("topright",
legend = c(expression(mu^2/k == 0),
expression(mu^2/k == 0.25),
expression(mu^2/k == 10),
expression(mu^2/k == 100)),
lty = c(1, 3, 1, 4),
lwd= c(2,1,1,1),
cex = 0.8)
#Comparison of rejection probabilities
t_value <- c(length(subset(pvalue_t_0,pvalue_t_0 < 0.05))/length(pvalue_t_0),
length(subset(pvalue_t_0.25,pvalue_t_0.25 < 0.05))/length(pvalue_t_0.25),
length(subset(pvalue_t_10,pvalue_t_10 < 0.05))/length(pvalue_t_10),
length(subset(pvalue_t_100,pvalue_t_100 < 0.05))/length(pvalue_t_100))
AR_statistic <- c(length(subset(pvalue_AR_0,pvalue_AR_0 < 0.05))/length(pvalue_AR_0),
length(subset(pvalue_AR_0.25,pvalue_AR_0.25 < 0.05))/length(pvalue_AR_0.25),
length(subset(pvalue_AR_10,pvalue_AR_10 < 0.05))/length(pvalue_AR_10),
length(subset(pvalue_AR_100,pvalue_AR_100 < 0.05))/length(pvalue_AR_100))
muoverk <- c(0, 0.25, 10, 100)
table_g <- cbind(data.frame(muoverk), data.frame(t_value), data.frame(AR_statistic))
library(stargazer)
stargazer(table_g, summary = TRUE)
getwd()
setwd("D:/GitHub/ECMA-31100/PS 4")
install.packages("tidyverse")
library(haven)
#library(tidyverse)
library(dplyr)
#Download data
data_set <- read_dta("401ksubs.dta")
data_set <- data_set %>% mutate(age_minus = age - 25, agesq_minus = (age-25)^2)
model_1 <- lm(nettfa ~ p401k + inc + age_minus + agesq_minus + marr + fsize ,data = data_set)
summary(model_1)
#By hand
y <-  matrix(data_set$nettfa)
x_data <-  c(rep(1,length(data_set$nettfa)), data_set$p401k, data_set$inc, data_set$age_minus,
data_set$agesq_minus, data_set$marr, data_set$fsize)
x <- matrix(x_data, nrow= length(data_set$nettfa), ncol = 7) #Matrix of treatment and covariates
beta_ols <- solve(t(x)%*%x)%*%t(x)%*%y
u <- y - x%*%beta_ols #Compute residuals
n <- length(data_set$nettfa)
g <- x*as.vector(u)   # form matrix "g"
S_hat <- t(g)%*%g/(n-7)   # sample variance of g
Avar_hat <- solve(t(x)%*%x/(n))%*%S_hat%*%solve(t(x)%*%x/(n)) #Variance Covarianze matrix
se <- sqrt(diag(Avar_hat/n))  # robust standard errors
y <-  matrix(data_set$nettfa)
x_data <-  c(rep(1,length(data_set$nettfa)), data_set$p401k, data_set$inc, data_set$age_minus,
data_set$agesq_minus, data_set$marr, data_set$fsize)
z_data <- c(rep(1,length(data_set$nettfa)), data_set$e401k, data_set$inc, data_set$age_minus,
data_set$agesq_minus, data_set$marr, data_set$fsize) #Selecting Data for z
x <- matrix(x_data, nrow= length(data_set$nettfa), ncol = 7) #Matrix of treatment and covariates
z <- matrix(z_data, nrow= length(data_set$nettfa), ncol = 7)
beta_2sls <- solve(t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%x)%*%t(x)%*%z%*%solve(t(z)%*%z)%*%t(z)%*%y #2SLS
#By stages
first_stage <- solve(t(z)%*%z)%*%t(z)%*%x[,2]
treat_hat <- z%*%first_stage
x_2 <- x
x_2[,2] <- treat_hat
second_stage <- solve(t(x_2)%*%x_2)%*%t(x_2)%*%y
#First Stage SE
u <- x[,2] - z%*%first_stage #Compute residuals
n <- length(data_set$nettfa)
g <- z*as.vector(u)   # form matrix "g"
S_hat <- t(g)%*%g/(n-7)   # sample variance of g
Avar_hat <- solve(t(z)%*%z/(n))%*%S_hat%*%solve(t(z)%*%z/(n)) #Variance Covarianze matrix
se <- sqrt(diag(Avar_hat/n))  # robust standard errors
#Second Stage SE
u <- y - x_2%*%second_stage #Compute residuals
#For loop to calculate omega
omega_temp <- 0
for(i in 1:n){
omega_i <- u[i]^2*t(t(z[i,]))%*%t(z[i,])
omega_temp <- omega_temp+omega_i
}
omega <- omega_temp/(n-7)
beta_omega <- solve(t(x)%*%z%*%solve(omega)%*%t(z)%*%x)%*%t(x)%*%z%*%solve(omega)%*%t(z)%*%y
v_he <- solve(((t(x)%*%z)/n)%*%solve(omega)%*%(t(z)%*%x)/n) #Compute Variance for the Heteroskedastic case
se <- sqrt(diag(v_he/n)) #Standard Errors for coefficient correspondent to treatment in Heteroskedastic case
first_stage
beta_2sls
logistic_reg <- glm(e401k ~ inc + as.factor(age_minus)*marr, data = data_set, family = binomial())
# Create a new data frame with the desired range of income
inc_values <- data.frame(inc = seq(min(data_set$inc), max(data_set$inc), by = 3))
inc_values$age_minus <- 16
inc_values$marr <- mean(data_set$marr)
# Predict probabilities
predicted_probabilities <- predict(logistic_reg, newdata = inc_values, type = "response")
data_set$prob <- logistic_reg$fitted.values
data_set <- data_set %>%  mutate(
kappa = 1 - ((p401k*(1-e401k))/(1-prob)) - ((1-p401k)*e401k/prob))
#For tests
i <- 1
data <- data_set
coeff_0 <- as.vector(beta_2sls)
coeff <- coeff_0
formula <- function(coeff, data){
sum <- 0
data <- as.matrix(data)
for(i in 1:n){
temp <- data[i,15]*(data[i,7]-coeff[2]*data[i,8]-sum(coeff[3:7]*data[i,c(2,12,13,3,6)])-coeff[1])^2
sum <- sum + temp
}
sum/n
}
formula(coeff_0, data_set)
arg_min <- optim(par = coeff_0,
fn = formula,
data = data_set,
method = "BFGS")
arg_min$par
setwd("D:/GitHub/ECMA-31100/PS 4")
